#!/bin/sh

ICONV_CUE_F=
ICONV_CUE_T=UTF8
# replace to "iconv" if want use iconv by default. Now use enconv (enca)
# require enca: http://gitorious.org/enca
ICONV_TYPE=enca
APEINFO=`which apeinfo`

NO_ICONV=N

while getopts 'hc:t:n' OPTION
do
    case $OPTION in
    c)
        ICONV_CUE_F=$OPTARG
        ;;
    t)
        if [ "${OPTARG}" = "enca" ]; then
            ICONV_TYPE=enca
        elif [ "${OPTARG}" = "iconv" ]; then
            # FIXIT: required strict order params
            #if [ -z "$ICONV_CUE_F" ]; then
            #    echo "Param [ -c cue_encoding ] required when using iconv as conversion type"
            #    exit 2
            #fi
            ICONV_TYPE=iconv
        fi 
        ;;
    n)
        NO_ICONV=Y
        ;;
    h)
        printf "Usage: %s: [-c cue_encoding]\n" $(basename $0) >&2
        exit 2
        ;;
    esac
done

DISKNUM=
test_disk_image() {
    DISKNUM=`echo "$1" | perl -pe 's/.*(?:cd|disk)\s*(\d+).*/$1/i'`
    if [ "x$DISKNUM" = "x$1" ]; then
        DISKNUM=""
    fi
}

#try fix this function
repair_cue() {
    FIRST_TRACK=N
    local file="$1"
    if [ -f "$file" ]; then
        # {while read do done < file} not work at some cyrillic file names
        cat "$file" | while read lineFromCue; do
            if [ `expr match "${lineFromCue}" '[[:blank:][:space:]]\{0,\}TRACK.*'` -gt 0 ] ; then
                if [ `expr match "${lineFromCue}" '[[:blank:][:space:]]\{0,\}TRACK 01.*'` -gt 0 ] ; then
                    FIRST_TRACK=Y
                else
                    FIRST_TRACK=N
                fi
            elif [ `expr match "${lineFromCue}" '[[:blank:][:space:]]\{0,\}INDEX 01'` -gt 0 ] ; then
                curentIndex=`echo "${lineFromCue}" | awk '{print $3}'`
                if [ "$curentIndex" != "00:00:00" ] ; then
                    echo "Repair cue [$1]"
                    newLine=`echo "${lineFromCue}" | sed -e "s/${curentIndex}/00:00:00/"`
                    `sed -i "s/$lineFromCue/$newLine/" "${file}"`
                fi
                break
            fi
        done
    fi
}

copy_tags_from_parent() {
    # source tag flac-file
    flacfile=$1
    FILETYPE=$(echo "${flacfile##*.}" | sed 's/\(.*\)/\L\1/')
    SOURCE_TAGS_FILE=.sourse_tag_file.$$
    TAGS_FILE=.result_tag_file.$$

    if [ -n $2 ] ; then
        workdir="$2/"
    else
        workdir="./"
    fi

    : > $SOURCE_TAGS_FILE
    if [ $FILETYPE = "flac" ]; then
        metaflac --export-tags-to=${SOURCE_TAGS_FILE} "${flacfile}"
    else
        $APEINFO -t "${flacfile}" > ${SOURCE_TAGS_FILE}
    fi

    find "${workdir}" -name '*.flac' -size -100M | while read file
    do
        if [ ! -f $TAGS_FILE ] ; then
            while read line ; do
                TAG=`echo $line | awk -F= '{print $1}'`
                exist="`metaflac --show-tag="${TAG}" "${file}"`"
                if [ -z "${exist}" ] ; then
                    echo $line >> $TAGS_FILE
                fi
            done < $SOURCE_TAGS_FILE
        fi
        if [ -f $TAGS_FILE ] ; then
            `metaflac --import-tags-from="${TAGS_FILE}" "${file}"`
        fi
    done

    rm -f $SOURCE_TAGS_FILE $TAGS_FILE
}

BASEDIR=${PWD}
SAVEIFS=$IFS
IFS='\n'
WORKDIR=.tmp-split-cue-flac

find ./ \( -name '*.flac' -o -name '*.ape' \) -size +100M |  while read image
do
    echo "$image"
    FILETYPE=$(echo "${image##*.}" | sed 's/\(.*\)/\L\1/')
    DIR=`dirname "$image"`
    BASE=`basename "$image"`
    BASE=`echo "$BASE" | sed -e "s/.${FILETYPE}//"`
    CUE=$BASE.cue
    IMAGE=$BASE.$FILETYPE
    if [ ! -f "$DIR/$CUE" ] ; then
        CUE=$IMAGE.cue
        echo $CUE
        if [ ! -f "$DIR/$CUE" ]; then
            continue
        fi
    fi

    cd "$DIR"
        echo "Splitting with shnsplit"
        rm -rf $WORKDIR
        mkdir $WORKDIR

        if [ "x$ICONV_TYPE" = "xiconv" ]; then
            # use iconv
            if [ "x$ICONV_CUE_F" != "x" ]; then
               echo "Converting cue (use iconv) $CUE"
               iconv -f $ICONV_CUE_F -t $ICONV_CUE_T "$CUE" -o "$WORKDIR/$CUE"
            else
               cp "$CUE" "$WORKDIR/$CUE"
            fi
        else
            # use enca
            cp "$CUE" "$WORKDIR/$CUE"
            if [ "x$ICONV_CUE_F" != "x" ]; then
               echo "Converting cue (use enconv) $CUE"
               enconv -x $ICONV_CUE_F "$WORKDIR/$CUE"
            elif [ "$NO_ICONV" != "Y" ]; then
               echo "Converting cue (use enconv) $CUE"
               enconv "$WORKDIR/$CUE"
            fi
        fi && \

        repair_cue "$WORKDIR/$CUE" && \

        shnsplit -d $WORKDIR -o flac -f "$WORKDIR/$CUE" -t "%n â€“ %t" "$IMAGE" && \

        echo "Fixing tags with cuetag" && \
        cuetag "$WORKDIR/$CUE" ./$WORKDIR/*.flac && \

        IFS=' ' && \
        echo "Copy tags from ${IMAGE} to new files" && \
        copy_tags_from_parent "${IMAGE}" "${WORKDIR}" && \
        IFS='\n' && \

        echo "Moving $IMAGE -> ${IMAGE}.image" && \
        mv "$IMAGE" "${IMAGE}.image" && \

        test_disk_image "$IMAGE" && \

        DSK= && \
        if [ "x$DISKNUM" != "x" ]; then
            DSK="CD$DISKNUM"
            echo "Creating $DSK dir"
            rm -rf $DSK
            mkdir $DSK
        fi && \

        mv $WORKDIR/*.flac ./$DSK && \

        rm -r $WORKDIR

    if [ "x$DIR" != "x." ]; then
        cd "$BASEDIR"
    fi
done
IFS=$SAVEIFS

